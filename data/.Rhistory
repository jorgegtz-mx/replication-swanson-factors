left_join(tiie_tidy, by = "Date")
#Paste reference rates to calendar
banxico_calendar_tidy <- banxico_calendar_tidy %>%
left_join(tiie_tidy, by = "Date")
#Plot reference date on each meeting date
ggplot(aes(banxico_calendar_tidy)) +
geom_line(aes(x = Date, y = ReferenceTIIE))
#Plot reference date on each meeting date
ggplot(banxico_calendar_tidy) +
geom_line(aes(x = Date, y = ReferenceTIIE))
#Plot reference date on each meeting date
ggplot(banxico_calendar_tidy) +
geom_line(aes(x = Date, y = ReferenceTIIE)) +
scale_x_date(limits = c("2008-01-01", "2023-08-31"))
as.Date("2008-01-01")
#Plot reference date on each meeting date
ggplot(banxico_calendar_tidy) +
geom_line(aes(x = Date, y = ReferenceTIIE)) +
scale_x_date(limits = c(as.Date("2008-01-01"), as.Date("2023-08-31")))
#Plot reference date on each meeting date
ggplot(banxico_calendar_tidy) +
geom_line(aes(x = Date, y = ReferenceTIIE)) +
scale_y_continuous(breaks = seq(0, 12, by = 0.5)) +
scale_x_date(limits = c(as.Date("2008-01-01"), as.Date("2023-08-31")))
banxico_calendar_tidy
install.packages("httr2")
install.packages("XML")
library(httr2)
library(XML)
source("FOMC Dates Functions.R")
#Pull historical FOMC data
fomcdatespre2009 <- get.fomc.dates.pre.2009(1990, 2008)
#Pull historical FOMC data
fomcdatespre2009 <- get.fomc.dates.pre.2009(1936, 2008)
#Pull historical FOMC data
fomcdatespre2009 <- get.fomc.dates.pre.2009(1936, 1990)
get.fomc.daets.from.20009()
get.fomc.dates.from.2009()
install.packages("httr")
install.packages("httr")
library(tidyverse)
library(readxl)
# library(httr2)
library(XML)
library(httr)
source("FOMC Dates Functions.R")
get.fomc.dates.from.2009()
get.fomc.dates.pre.2009(1936, 1990)
get.fomc.dates.from.2009()
#Pull historical FOMC data
get.fomc.dates.pre.2009()
library(tidyverse)
library(readxl)
# library(httr2)
library(XML)
library(httr)
source("FOMC Dates Functions.R")
#Pull historical FOMC data
get.fomc.dates.pre.2009()
xhtmldoc = htmlTreeParse("http://www.federalreserve.gov/monetarypolicy/fomchistorical2008.htm", useInternalNodes = TRUE)
url <- "http://www.federalreserve.gov/monetarypolicy/fomchistorical2008.htm"
htmlParse(rawToChar(GET(url)$content))
doc <- htmlParse(rawToChar(GET(url)$content))
setwd("~/Library/CloudStorage/OneDrive-Personal/Libreta/1. Monetary Policy Shocks/data")
library(tidyverse)
library(readxl)
library(yahoofinancer) # retrieve prices of mexican futures
# Set working directory
# Load FED shock factors
fed_factors <- read_xlsx("pre-and-post-ZLB-factors-extended.xlsx", sheet = "Data2", skip = 1,
col_types = c("text", rep("numeric", 4)),
col_names = c("date", "ffr_shock", "fw_shock", "lsap_shock", "lsap_schock2"))
# Load securities info
securities <- read_xlsx("securities price.xlsx",
col_types = c("date", rep("numeric", 5)),
col_names = c("date", "naftrac_close", "naftrac_open", "naftrac_high",
"naftrac_low", "cetrg028_index"))
# Load treasuries data
treasuries <- read_xlsx("mexican treasuries.xlsx", sheet = "data",
col_types = c("date", rep("numeric", 13)),
guess_max = 4000) %>%
mutate(Fecha = as.Date(Fecha))
# Compute change in prices
securities_calculated <- securities %>%
mutate(date_string = as.Date(date),
dlog_naftrac = log(naftrac_close) - log(naftrac_open))
# See NAFTRAC price change evolution
ggplot(securities_calculated) +
geom_line(aes(x = date, y = dlog_naftrac))
ggplot(securities_calculated) +
geom_line(aes(x = date, y = naftrac_open)) +
geom_smooth(aes(x = date, y = naftrac_open), formula = "y ~ x", method = "lm")
# merge securities and fed factor
db <- fed_factors %>%
mutate(date_string = as.Date(date, format = "%Y-%m-%d")) %>%
inner_join(securities_calculated, by = "date_string") %>%
select(-c("date.x", "date.y")) %>%
select(date_string, everything()) %>%
filter(!is.na(date_string))
# See what dates have NULL values for the price changes
mx_holidays <- (db %>%
filter(is.na(dlog_naftrac)) %>%
select(date_string))$date_string
print(mx_holidays) # día de la independencia, día de la Guadalupana, día de Muertos, día del trabajo
# compute the change between the last close price and the next business day open price
proxy_changes <- securities_calculated %>%
filter(date_string %in% c((mx_holidays - 1), (mx_holidays + 1))) %>%
arrange(date_string) %>%
transmute(date_string, naftrac_open, naftrac_close = lag(naftrac_close),
dlog_naftrac = log(naftrac_open) - log(naftrac_close)) %>%
filter(date_string %in% (mx_holidays + 1)) %>%
mutate(date_string = date_string - 1)
# Drop deltas with null values and replace with proxy of price changes
db_replacement <- db %>%
filter(date_string %in% mx_holidays) %>%
select(date_string:lsap_schock2) %>%
left_join(proxy_changes, by = "date_string")
# main data with proxy of price changes
db2 <- db %>%
filter(!(date_string %in% mx_holidays)) %>%
bind_rows(db_replacement) %>%
arrange(date_string)
mxn_futures <- Ticker$new('6m=f')
results <- tibble()
#retrieve prices from Yahoo! Finance
for (i in 1:length(db2$date_string)) {
start_date <- db2$date_string[i] %>% as.character()
end_date <- (db2$date_string[i]+1) %>% as.character()
results <- bind_rows(results, mxn_futures$get_history(start = start_date, end = end_date))
}
mxn_futures_table <- results %>%
transmute(date_string = as.Date(date), mxn_futures_pctdelta = (close/open)-1)
db2$date_string
mxn_futures
Ticker
Ticker$new
#retrieve IPC series from Yahoo! Finance
bmv_ipc <- Ticker$new("^MXX")
results2 <- tibble()
#query day by day
for (i in 1:length(db2$date_string)) {
start_date <- db2$date_string[i] %>% as.character()
end_date <- (db2$date_string[i]+1) %>% as.character()
results <- bind_rows(results, bmv_ipc$get_history(start = start_date, end = end_date))
}
bmv_ipc_series_table <- results2 %>%
transmute(date_string = as.Date(date), bmv_ipc_pctdelta = (close/open)-1)
results2
results2
bmv_ipc <- Ticker$new("MXX")
results2 <- tibble()
#query day by day
for (i in 1:length(db2$date_string)) {
start_date <- db2$date_string[i] %>% as.character()
end_date <- (db2$date_string[i]+1) %>% as.character()
results2 <- bind_rows(results2, bmv_ipc$get_history(start = start_date, end = end_date))
}
bmv_ipc_series_table <- results2 %>%
transmute(date_string = as.Date(date), bmv_ipc_pctdelta = (close/open)-1)
print("hello hello!")
bmv_ipc_series_table
results2
results2$date %>% summary()
bmv_ipc_series_table <- results2 %>%
mutate(date_string = as.Date(date), bmv_ipc_pctdelta = (close/open)-1)
#viz series
ggplot(bmv_ipc_series_table) +
geom_line(aes(x = date, y = open)) +
geom_smooth(aes(x = date, y = open), formula = "y ~ x", method = "lm")
bmv_ipc_series_table
bmv_ipc_series_table %>% tail()
bmv_ipc_series_table %>% head()
bmv_ipc$summary_profile
bmv_ipc$summary_profile()
bmv_ipc$summary_detail
bmv_ipc$index_trend
bmv_ipc <- Ticker$new("EMXX")
results2 <- tibble()
#query day by day
for (i in 1:length(db2$date_string)) {
start_date <- db2$date_string[i] %>% as.character()
end_date <- (db2$date_string[i]+1) %>% as.character()
results2 <- bind_rows(results2, bmv_ipc$get_history(start = start_date, end = end_date))
}
bmv_ipc_series_table <- results2 %>%
mutate(date_string = as.Date(date), bmv_ipc_pctdelta = (close/open)-1)
results2
#retrieve IPC series from Yahoo! Finance
bmv_ipc <- Ticker$new("\^MXX")
#retrieve IPC series from Yahoo! Finance
bmv_ipc <- Ticker$new("/^MXX")
bmv_ipc <- Ticker$new("^MXX")
results2 <- tibble()
#query day by day
for (i in 1:length(db2$date_string)) {
start_date <- db2$date_string[i] %>% as.character()
end_date <- (db2$date_string[i]+1) %>% as.character()
results2 <- bind_rows(results2, bmv_ipc$get_history(start = start_date, end = end_date))
}
results2
bmv_ipc_series_table <- results2 %>%
mutate(date_string = as.Date(date), bmv_ipc_pctdelta = (close/open)-1)
bmv_ipc_series_table %>% head()
#viz series
ggplot(bmv_ipc_series_table) +
geom_line(aes(x = date, y = open)) +
geom_smooth(aes(x = date, y = open), formula = "y ~ x", method = "lm")
summary(bmv_ipc_series_table)
bmv_ipc_series_table <- results2 %>%
transmute(date_string = as.Date(date), bmv_ipc_pctdelta = (close/open)-1)
bmv_ipc_series_table <- results2 %>%
transmute(date_string = as.Date(date), bmv_ipc_pctdelta = (close/open)-1)
print(bmv_ipc_series_table)
#viz series
ggplot(results2) +
geom_line(aes(x = date, y = open)) +
geom_smooth(aes(x = date, y = open), formula = "y ~ x", method = "lm")
db3 <- db2 %>%
left_join(mxn_futures_table, by = "date_string") %>%
left_join(bmv_ipc_series_table, by = "date_string")
# compute CETES one day yield change
treasuries_change <- treasuries %>%
transmute(Fecha, dcetes28 = cetes28-lag(cetes28), dcetes91 = cetes91-lag(cetes91),
dcetes182 = cetes182-lag(cetes182), dcetes364 = cetes364-lag(cetes364),
dcetes2a = cetes2a - lag(cetes2a))
# compute CETES yield change for Mexican holidays
treasuries_proxy_changes <- treasuries %>%
filter(Fecha %in% c((mx_holidays - 1), (mx_holidays + 1))) %>%
arrange(Fecha) %>%
transmute(Fecha, dcetes28 = cetes28-lag(cetes28), dcetes91 = cetes91-lag(cetes91),
dcetes182 = cetes182-lag(cetes182), dcetes364 = cetes364-lag(cetes364),
dcetes2a = cetes2a - lag(cetes2a)) %>%
filter(Fecha %in% (mx_holidays + 1)) %>%
mutate(Fecha = Fecha- 1)
# both treasury change tables
treasuries_change_complete <- bind_rows(treasuries_proxy_changes, treasuries_change) %>%
arrange(Fecha) %>%
rename(date_string = Fecha)
#merge treasuries yield change to main table
#2-year cetes were issued for the first time recently, i won't include this in my analysis
db4 <-  db3 %>%
left_join(treasuries_change_complete, by = "date_string") %>%
rename(date = date_string)
#glimpse final result
glimpse(db4)
# Export table
fed_factors2 <- fed_factors %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
# Standardize date frequency to estimate IRF using Newey West (Stata requires that time interval is constant)
# I believe this should not change the results
constant_months <- map_vec(seq(0, 135, by = 1), ~as.Date("2022-12-01")-months(.))
db4$date <- constant_months
db4$date
db4$date %>% tail()
db4 %>% tail()
db4 %>% tail() %>% tail()
db4 %>% tail() %>% View()
length(db4)
nrow(db4)
length(constant_months)
nrow(db4)
# Standardize date frequency to estimate IRF using Newey West (Stata requires that time interval is constant)
# I believe this should not change the results
constant_months <- map_vec(seq(0, 134, by = 1), ~as.Date("2022-12-01")-months(.))
nrow(db4)
length(constant_months)
db4$date <- constant_months
constant_months %>% tail()
constant_months %>% head()
db4 %>%
write_excel_csv("swanson a la mexicana (regular frequency).csv")
ncol(db4)
db4 %>%  glimpse()
db3x
db3
sort(constant_months)
constant_months <- sort(map_vec(seq(0, 134, by = 1), ~as.Date("2022-12-01")-months(.)))
db4$date <- constant_months
db4 %>%
write_excel_csv("swanson a la mexicana (regular frequency).csv")
bmv_ipc_series_table <- results2 %>%
transmute(date_string = as.Date(date), bmv_ipc_pctdelta = log(open)-log(close))
summary(bmv_ipc_series_table)
library(tidyverse)
library(readxl)
library(yahoofinancer) # retrieve prices of mexican futures
# Set working directory
# Load FED shock factors
fed_factors <- read_xlsx("pre-and-post-ZLB-factors-extended.xlsx", sheet = "Data2", skip = 1,
col_types = c("text", rep("numeric", 4)),
col_names = c("date", "ffr_shock", "fw_shock", "lsap_shock", "lsap_schock2"))
# Load securities info
securities <- read_xlsx("securities price.xlsx",
col_types = c("date", rep("numeric", 5)),
col_names = c("date", "naftrac_close", "naftrac_open", "naftrac_high",
"naftrac_low", "cetrg028_index"))
# Load treasuries data
treasuries <- read_xlsx("mexican treasuries.xlsx", sheet = "data",
col_types = c("date", rep("numeric", 13)),
guess_max = 4000) %>%
mutate(Fecha = as.Date(Fecha))
# Compute change in prices
securities_calculated <- securities %>%
mutate(date_string = as.Date(date),
dlog_naftrac = log(naftrac_close) - log(naftrac_open))
# See NAFTRAC price change evolution
ggplot(securities_calculated) +
geom_line(aes(x = date, y = dlog_naftrac))
ggplot(securities_calculated) +
geom_line(aes(x = date, y = naftrac_open)) +
geom_smooth(aes(x = date, y = naftrac_open), formula = "y ~ x", method = "lm")
# merge securities and fed factor
db <- fed_factors %>%
mutate(date_string = as.Date(date, format = "%Y-%m-%d")) %>%
inner_join(securities_calculated, by = "date_string") %>%
select(-c("date.x", "date.y")) %>%
select(date_string, everything()) %>%
filter(!is.na(date_string))
# See what dates have NULL values for the price changes
mx_holidays <- (db %>%
filter(is.na(dlog_naftrac)) %>%
select(date_string))$date_string
print(mx_holidays) # día de la independencia, día de la Guadalupana, día de Muertos, día del trabajo
# compute the change between the last close price and the next business day open price
proxy_changes <- securities_calculated %>%
filter(date_string %in% c((mx_holidays - 1), (mx_holidays + 1))) %>%
arrange(date_string) %>%
transmute(date_string, naftrac_open, naftrac_close = lag(naftrac_close),
dlog_naftrac = log(naftrac_open) - log(naftrac_close)) %>%
filter(date_string %in% (mx_holidays + 1)) %>%
mutate(date_string = date_string - 1)
# Drop deltas with null values and replace with proxy of price changes
db_replacement <- db %>%
filter(date_string %in% mx_holidays) %>%
select(date_string:lsap_schock2) %>%
left_join(proxy_changes, by = "date_string")
# main data with proxy of price changes
db2 <- db %>%
filter(!(date_string %in% mx_holidays)) %>%
bind_rows(db_replacement) %>%
arrange(date_string)
mxn_futures <- Ticker$new('6m=f')
results <- tibble()
Ticker$new
#retrieve prices from Yahoo! Finance
for (i in 1:length(db2$date_string)) {
start_date <- db2$date_string[i] %>% as.character()
end_date <- (db2$date_string[i]+1) %>% as.character()
results <- bind_rows(results, mxn_futures$get_history(start = start_date, end = end_date))
}
mxn_futures_table <- results %>%
transmute(date_string = as.Date(date), mxn_futures_pctdelta = (close/open)-1)
#retrieve IPC series from Yahoo! Finance
bmv_ipc <- Ticker$new("^MXX")
results2 <- tibble()
#query day by day
for (i in 1:length(db2$date_string)) {
start_date <- db2$date_string[i] %>% as.character()
end_date <- (db2$date_string[i]+1) %>% as.character()
results2 <- bind_rows(results2, bmv_ipc$get_history(start = start_date, end = end_date))
}
bmv_ipc_series_table <- results2 %>%
transmute(date_string = as.Date(date), dlog_bmvipc = log(open)-log(close))
#viz series
ggplot(results2) +
geom_line(aes(x = date, y = open)) +
geom_smooth(aes(x = date, y = open), formula = "y ~ x", method = "lm")
# merge mxn future changes with db2
# sadly, most changes are 0
db3 <- db2 %>%
left_join(mxn_futures_table, by = "date_string") %>%
left_join(bmv_ipc_series_table, by = "date_string")
# compute CETES one day yield change
treasuries_change <- treasuries %>%
transmute(Fecha, dcetes28 = cetes28-lag(cetes28), dcetes91 = cetes91-lag(cetes91),
dcetes182 = cetes182-lag(cetes182), dcetes364 = cetes364-lag(cetes364),
dcetes2a = cetes2a - lag(cetes2a))
# compute CETES yield change for Mexican holidays
treasuries_proxy_changes <- treasuries %>%
filter(Fecha %in% c((mx_holidays - 1), (mx_holidays + 1))) %>%
arrange(Fecha) %>%
transmute(Fecha, dcetes28 = cetes28-lag(cetes28), dcetes91 = cetes91-lag(cetes91),
dcetes182 = cetes182-lag(cetes182), dcetes364 = cetes364-lag(cetes364),
dcetes2a = cetes2a - lag(cetes2a)) %>%
filter(Fecha %in% (mx_holidays + 1)) %>%
mutate(Fecha = Fecha- 1)
# both treasury change tables
treasuries_change_complete <- bind_rows(treasuries_proxy_changes, treasuries_change) %>%
arrange(Fecha) %>%
rename(date_string = Fecha)
#merge treasuries yield change to main table
#2-year cetes were issued for the first time recently, i won't include this in my analysis
db4 <-  db3 %>%
left_join(treasuries_change_complete, by = "date_string") %>%
rename(date = date_string)
#glimpse final result
glimpse(db4)
# Export table
fed_factors2 <- fed_factors %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
# Standardize date frequency to estimate IRF using Newey West (Stata requires that time interval is constant)
# I believe this should not change the results
constant_months <- sort(map_vec(seq(0, 134, by = 1), ~as.Date("2022-12-01")-months(.)))
db4$date <- constant_months
db4 %>%
write_excel_csv("swanson a la mexicana (regular frequency).csv")
db4
db4 %>% drop_na()
db4 %>% filter(across(everything(), ~is.na(.x)))
db4 %>% if_any(across(everything(), ~is.na(.x)))
db4 %>% if_any(~is.na(.x))
db4 %>% if_any(is.na)
db4 %>% filter(if_any(is.na))
help(if_any)
db4 %>% filter(if_any(everything(),is.na))
db4 %>% filter(if_any(everything(),  ~is.na))
db4 %>% filter(if_any(everything(),  !is.na))
db4 %>% filter(if_any(everything(),  is.na))
db4 %>% filter(if_any(everything(),  ~is.na(.x)))
db4 %>% filter(if_any(everything(),  is.na(.x)))
db4 %>% filter(if_any(everything(),  ~!is.na(.x)))
db4 %>% filter(if_any(everything(),  ~!is.na(.x))) %>% View()
db4 %>% filter(!is.na(dlog_bmv_ipc))
db4 %>% filter(!is.na(dlog_bmvipc))
db4 %>% filter(!is.na(dlog_bmvipc)) %>% select(-cetrg028_index, -dcetes2a)
db4 %>% filter(!is.na(dlog_bmvipc)) %>% select(-cetrg028_index, -dcetes2a) %>% View()
db4 %>% filter(!is.na(dlog_bmvipc), !is.na(dcetes28)) %>% select(-cetrg028_index, -dcetes2a)
db4 %>% filter(!is.na(dlog_bmvipc), !is.na(dcetes28)) %>% select(-cetrg028_index, -dcetes2a) %>%  View()
db4 %>%
filter(!is.na(dlog_bmvipc), !is.na(dcetes28)) %>%
select(-cetrg028_index, -dcetes2a) %>%
write_excel_csv("swanson a la mexicana (regular frequency).csv")
bmv_ipc_series_table <- results2 %>%
transmute(date_string = as.Date(date), dlog_bmvipc = log(close)-log(open))
#viz series
ggplot(results2) +
geom_line(aes(x = date, y = open)) +
geom_smooth(aes(x = date, y = open), formula = "y ~ x", method = "lm")
# merge mxn future changes with db2
# sadly, most changes are 0
db3 <- db2 %>%
left_join(mxn_futures_table, by = "date_string") %>%
left_join(bmv_ipc_series_table, by = "date_string")
# compute CETES one day yield change
treasuries_change <- treasuries %>%
transmute(Fecha, dcetes28 = cetes28-lag(cetes28), dcetes91 = cetes91-lag(cetes91),
dcetes182 = cetes182-lag(cetes182), dcetes364 = cetes364-lag(cetes364),
dcetes2a = cetes2a - lag(cetes2a))
# compute CETES yield change for Mexican holidays
treasuries_proxy_changes <- treasuries %>%
filter(Fecha %in% c((mx_holidays - 1), (mx_holidays + 1))) %>%
arrange(Fecha) %>%
transmute(Fecha, dcetes28 = cetes28-lag(cetes28), dcetes91 = cetes91-lag(cetes91),
dcetes182 = cetes182-lag(cetes182), dcetes364 = cetes364-lag(cetes364),
dcetes2a = cetes2a - lag(cetes2a)) %>%
filter(Fecha %in% (mx_holidays + 1)) %>%
mutate(Fecha = Fecha- 1)
# both treasury change tables
treasuries_change_complete <- bind_rows(treasuries_proxy_changes, treasuries_change) %>%
arrange(Fecha) %>%
rename(date_string = Fecha)
#merge treasuries yield change to main table
#2-year cetes were issued for the first time recently, i won't include this in my analysis
db4 <-  db3 %>%
left_join(treasuries_change_complete, by = "date_string") %>%
rename(date = date_string)
#glimpse final result
glimpse(db4)
# Export table
fed_factors2 <- fed_factors %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
# Standardize date frequency to estimate IRF using Newey West (Stata requires that time interval is constant)
# I believe this should not change the results
constant_months <- sort(map_vec(seq(0, 134, by = 1), ~as.Date("2022-12-01")-months(.)))
db4$date <- constant_months
db4 %>%
filter(!is.na(dlog_bmvipc), !is.na(dcetes28)) %>%
select(-cetrg028_index, -dcetes2a) %>%
write_excel_csv("swanson a la mexicana (regular frequency).csv")
# both treasury change tables
treasuries_change_complete <- bind_rows(treasuries_proxy_changes, treasuries_change) %>%
arrange(Fecha) %>%
rename(date_string = Fecha)
#merge treasuries yield change to main table
#2-year cetes were issued for the first time recently, i won't include this in my analysis
db4 <-  db3 %>%
left_join(treasuries_change_complete, by = "date_string") %>%
rename(date = date_string)
#glimpse final result
glimpse(db4)
# Export table
fed_factors2 <- fed_factors %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
# Standardize date frequency to estimate IRF using Newey West (Stata requires that time interval is constant)
# I believe this should not change the results
db4 %>%
filter(!is.na(dlog_bmvipc), !is.na(dcetes28)) %>%
select(-cetrg028_index, -dcetes2a) %>%
write_excel_csv("swanson a la mexicana (irregular frequency).csv")
db4$dcetes182
plot(db4$dcetes182)
glimpse(db4)
ggplot(db4) +
geom_line(aes(x = date, y = dcetes28))
glimpse(db4)
ggplot(db4) +
geom_line(aes(x = date, y = dlog_naftract))
ggplot(db4) +
geom_line(aes(x = date, y = dlog_naftrac))
geom_line(aes(x = date, y = naftrac_open)
ggplot(db4) +
geom_line(aes(x = date, y = naftrac_open))
